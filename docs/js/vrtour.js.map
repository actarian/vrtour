{"version":3,"names":[],"mappings":"","sources":["src/js/vrtour.js"],"sourcesContent":["/* jshint esversion: 6 */\n/* global window, document, TweenMax, THREE, WEBVR */\n\nimport html2canvas from 'html2canvas';\nimport DragListener from './shared/drag.listener';\n\nTHREE.Euler.prototype.add = function(euler) {\n\tthis.set(this.x + euler.x, this.y + euler.y, this.z + euler.z, this.order);\n\treturn this;\n};\n\nconst shaderPoint = {\n\tvertexShader: `\n\tattribute float size;\n\tattribute vec4 ca;\n\tvarying vec4 vColor;\n\tvoid main() {\n\t\tvColor = ca;\n\t\tvec4 mvPosition = modelViewMatrix * vec4(position, 1.0);\n\t\tgl_PointSize = size * (400.0 / -mvPosition.z);\n\t\tgl_Position = projectionMatrix * mvPosition;\n\t}\n\t`,\n\tfragmentShader: `\n\tuniform vec3 color;\n\tuniform sampler2D texture;\n\tvarying vec4 vColor;\n\tvoid main() {\n\t\tvec4 textureColor = texture2D(texture, gl_PointCoord);\n\t\t// if (textureColor.a < 0.5) discard;\n\t\tgl_FragColor = textureColor * vec4(color * vColor.xyz, 1.0);\n\t\t// float depth = gl_FragCoord.z / gl_FragCoord.w;\n\t\tgl_FragColor = vec4(vec3(1.0), gl_FragColor.w);\n\t}\n\t`,\n};\n\nclass VRTour {\n\n\tconstructor() {\n\t\tthis.mouse = { x: 0, y: 0 };\n\t\tthis.parallax = { x: 0, y: 0 };\n\t\tthis.size = { width: 0, height: 0, aspect: 0 };\n\t\tthis.isUserInteracting = false;\n\t\tthis.longitude = 0;\n\t\tthis.latitude = 0;\n\t\tthis.direction = 1;\n\t\tthis.speed = 1;\n\t\tthis.inertia = new THREE.Vector3(0, 0, 0);\n\t}\n\n\tget index() {\n\t\treturn this.index_;\n\t}\n\tset index(index) {\n\t\tthis.index_ = index;\n\t\tthis.view = this.views[index];\n\t}\n\n\tget view() {\n\t\treturn this.view_;\n\t}\n\tset view(view) {\n\t\tthis.onInitView(this.view_, view);\n\t\tthis.view_ = view;\n\t}\n\n\tload(jsonUrl) {\n\t\ttry {\n\t\t\tthis.init();\n\t\t\tfetch(jsonUrl).then(response => response.json()).then(response => {\n\t\t\t\tthis.views = response.views;\n\t\t\t\tthis.index = 0;\n\t\t\t});\n\t\t} catch (error) {\n\t\t\tthis.debugInfo.innerHTML = error;\n\t\t}\n\t}\n\n\tinit() {\n\t\tconst body = document.querySelector('body');\n\t\tconst section = document.querySelector('.vrtour');\n\t\tconst container = section.querySelector('.vrtour__container');\n\t\tconst debugInfo = section.querySelector('.debug__info');\n\t\tconst debugSave = section.querySelector('.debug__save');\n\t\t// const shadow = section.querySelector('.vrtour__shadow');\n\t\t// const title = section.querySelector('.vrtour__headline .title');\n\t\t// const abstract = section.querySelector('.vrtour__headline .abstract');\n\t\t// Dom.detect(body);\n\t\t// body.classList.add('ready');\n\t\tthis.body = body;\n\t\tthis.section = section;\n\t\tthis.container = container;\n\t\tthis.debugInfo = debugInfo;\n\t\tthis.debugSave = debugSave;\n\t\t// this.shadow = shadow;\n\t\t// this.title = title;\n\t\t// this.abstract = abstract;\n\t\tthis.initRenderer();\n\t}\n\n\tinitRenderer() {\n\t\tconst scene = this.scene = this.addScene();\n\t\tconst camera = this.camera = this.addCamera();\n\t\tconst environment = this.environment = this.addEnvironment(scene);\n\t\tconst floor = this.floor = this.addFloor(scene);\n\t\tconst ceil = this.ceil = this.addCeil(scene);\n\t\t// renderer\n\t\tconst renderer = this.renderer = this.addRenderer();\n\t\t// controllers\n\t\tconst left = this.left = this.addControllerLeft(renderer, scene);\n\t\tconst right = this.right = this.addControllerRight(renderer, scene);\n\t\t// hands\n\t\t// const hands = this.hands = this.addHands();\n\t\t// raycaster\n\t\tconst raycaster = this.raycaster = new THREE.Raycaster();\n\t\tconst dragListener = this.dragListener = this.addDragListener();\n\t\tthis.dragListener = dragListener;\n\t\tthis.onWindowResize = this.onWindowResize.bind(this);\n\t\tthis.onMouseMove = this.onMouseMove.bind(this);\n\t\tthis.onMouseWheel = this.onMouseWheel.bind(this);\n\t\tthis.onClick = this.onClick.bind(this);\n\t\tthis.onSave = this.onSave.bind(this);\n\t\twindow.addEventListener('resize', this.onWindowResize, false);\n\t\tdocument.addEventListener('mousemove', this.onMouseMove, false);\n\t\tdocument.addEventListener('wheel', this.onMouseWheel, false);\n\t\tthis.container.addEventListener('click', this.onClick, false);\n\t\tthis.debugSave.addEventListener('click', this.onSave, false);\n\t\tthis.section.classList.add('init');\n\t\tthis.onWindowResize();\n\t\tthis.animate();\n\t\t// this.play();\n\t}\n\n\taddScene() {\n\t\tconst scene = new THREE.Scene();\n\t\t// scene.background = new THREE.Color(0x000000);\n\t\t// scene.background = new THREE.Color(0x404040);\n\t\t// scene.fog = new THREE.Fog(scene.background, 10, 700);\n\t\treturn scene;\n\t}\n\n\taddCamera() {\n\t\tconst camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.01, 1100);\n\t\t// camera.layers.enable(1);\n\t\t// camera.position.set(0, 0, 0);\n\t\tcamera.target = new THREE.Vector3(0, 0, 0);\n\t\treturn camera;\n\t}\n\n\taddRenderer() {\n\t\tconst renderer = new THREE.WebGLRenderer({\n\t\t\talpha: false,\n\t\t\tantialias: true,\n\t\t});\n\t\tthis.renderer = renderer;\n\t\t// renderer.shadowMap.enabled = true;\n\t\trenderer.setClearColor(0x000000, 1);\n\t\trenderer.setPixelRatio(window.devicePixelRatio);\n\t\trenderer.setSize(window.innerWidth, window.innerHeight);\n\t\trenderer.vr.enabled = true;\n\t\t// container.innerHTML = '';\n\t\tthis.container.appendChild(renderer.domElement);\n\t\tthis.container.appendChild(WEBVR.createButton(renderer, { referenceSpaceType: 'local' }));\n\t\t// this.container.querySelector('[href]').setAttribute('target', '_blank');\n\t\treturn renderer;\n\t}\n\n\taddEnvironment(parent) {\n\t\tconst group = new THREE.Group();\n\t\t//\n\t\tvar geometry = new THREE.SphereBufferGeometry(500, 16, 16);\n\t\t// invert the geometry on the x-axis so that all of the faces point inward\n\t\tgeometry.scale(-1, 1, 1);\n\t\tconst material = new THREE.MeshBasicMaterial({\n\t\t\tcolor: 0xffffff,\n\t\t\t// depthTest: false,\n\t\t\ttransparent: false,\n\t\t\topacity: 1.0,\n\t\t\twireframe: true\n\t\t});\n\t\t/*\n\t\tconst material = new THREE.MeshStandardMaterial({\n\t\t\tcolor: '#fefefe',\n\t\t\troughness: 0.9,\n\t\t\tmetalness: 0.1,\n\t\t\troughnessMap: texture,\n\t\t\tmap: texture,\n\t\t\ttransparent: true,\n\t\t\topacity: 0,\n\t\t\t// premultipliedAlpha: true,\n\t\t});\n\t\t*/\n\t\tconst sphere = new THREE.Mesh(geometry, material);\n\t\t// sphere.castShadow = false;\n\t\t// sphere.receiveShadow = true;\n\t\tgroup.add(sphere);\n\t\tgroup.sphere = sphere;\n\t\t//\n\t\t/*\n\t\tconst rotation = new THREE.Euler(0.0, 0.0, 0.0, 'XYZ');\n\t\tgroup.rotation.set(rotation.x, rotation.y, rotation.z);\n\t\t*/\n\t\tparent.add(group);\n\t\treturn group;\n\t}\n\n\taddFloor(parent) {\n\t\tconst geometry = new THREE.PlaneGeometry(300, 300, 3, 3);\n\t\tconst loader = new THREE.TextureLoader();\n\t\tconst texture = loader.load('img/floor.jpg');\n\t\tconst textureAlpha = loader.load('img/floor-alpha.jpg');\n\t\tconst material = new THREE.MeshBasicMaterial({\n\t\t\tmap: texture,\n\t\t\talphaMap: textureAlpha,\n\t\t\talphaTest: 0.5,\n\t\t\t// blending: THREE.AdditiveBlending,\n\t\t\t// depthTest: true,\n\t\t\ttransparent: true\n\t\t});\n\t\tconst mesh = new THREE.Mesh(geometry, material);\n\t\tmesh.position.y = -300;\n\t\tmesh.rotation.x = -Math.PI / 2;\n\t\tparent.add(mesh);\n\t\treturn mesh;\n\t}\n\n\taddCeil(parent) {\n\t\tconst geometry = new THREE.PlaneGeometry(200, 200, 3, 3);\n\t\tconst loader = new THREE.TextureLoader();\n\t\tconst texture = loader.load('img/ceil.jpg');\n\t\tconst textureAlpha = loader.load('img/ceil-alpha.jpg');\n\t\tconst material = new THREE.MeshBasicMaterial({\n\t\t\tmap: texture,\n\t\t\talphaMap: textureAlpha,\n\t\t\talphaTest: 0.5,\n\t\t\t// blending: THREE.AdditiveBlending,\n\t\t\t// depthTest: true,\n\t\t\ttransparent: true\n\t\t});\n\t\tconst mesh = new THREE.Mesh(geometry, material);\n\t\tmesh.position.y = 400;\n\t\tmesh.rotation.x = Math.PI / 2;\n\t\tparent.add(mesh);\n\t\treturn mesh;\n\t}\n\n\taddControllerLeft(renderer, scene) {\n\t\tconst controller = renderer.vr.getController(0);\n\t\tconst cylinder = controller.cylinder = this.addControllerCylinder(controller, 0);\n\t\tcontroller.addEventListener('selectstart', (event) => {\n\t\t\tthis.onSelectStart(event);\n\t\t});\n\t\tcontroller.addEventListener('selectend', (event) => {\n\t\t\tthis.onSelectEnd(event);\n\t\t});\n\t\tscene.add(controller);\n\t\treturn controller;\n\t}\n\n\taddControllerRight(renderer, scene) {\n\t\tconst controller = renderer.vr.getController(1);\n\t\tconst cylinder = controller.cylinder = this.addControllerCylinder(controller, 1);\n\t\t/*\n\t\tcontroller.addEventListener('selectstart', (event) => {\n\t\t\tthis.onSelectStart(event);\n\t\t});\n\t\tcontroller.addEventListener('selectend', (event) => {\n\t\t\tthis.onSelectEnd(event);\n\t\t});\n\t\t*/\n\t\tscene.add(controller);\n\t\treturn controller;\n\t}\n\n\taddControllerCylinder(controller, i) {\n\t\t// pointer\n\t\tconst modifier = new THREE.SubdivisionModifier(2);\n\t\tconst geometry = new THREE.CylinderGeometry(4, 4, 30, 12);\n\t\tconst smoothGeometry = modifier.modify(geometry);\n\t\tconst smoothBufferGeometry = new THREE.BufferGeometry().fromGeometry(smoothGeometry);\n\t\tconst material = new THREE.MeshStandardMaterial({\n\t\t\tcolor: i === 0 ? 0x0000ff : 0xff0000,\n\t\t\troughness: 0.2,\n\t\t\tmetalness: 0.1,\n\t\t});\n\t\tconst mesh = new THREE.Mesh(smoothBufferGeometry, material);\n\t\tcontroller.add(mesh);\n\t}\n\n\taddHands() {\n\t\tconst hands = [];\n\t\tconst left = this.left;\n\t\tconst right = this.right;\n\t\tconst file = 'https://cdn.glitch.com/7ae766be-18fb-4945-ad9d-8cc3be027694%2Fhand.obj?1558677422910';\n\t\tconst loader = new THREE.OBJLoader();\n\t\tloader.load(file, (group) => {\n\t\t\tconst texture = new THREE.TextureLoader().load('https://cdn.glitch.com/7ae766be-18fb-4945-ad9d-8cc3be027694%2FBazC_SkinMat.jpg?1558678160164');\n\t\t\tconst hand = group.children[0];\n\t\t\thand.geometry.rotateZ(-Math.PI / 2);\n\t\t\thand.geometry.rotateY(Math.PI);\n\t\t\thand.geometry.translate(1, -0.2, 0.25);\n\t\t\thand.geometry.scale(0.1, 0.1, 0.1);\n\t\t\thand.material = new THREE.MeshMatcapMaterial({ matcap: texture });\n\t\t\thand.scale.x = -1;\n\t\t\tconst leftHand = hand.clone();\n\t\t\tright.add(leftHand);\n\t\t\thands.push(leftHand);\n\t\t\thand.scale.x = 1;\n\t\t\t// const bills = this.addBillsToHand(hand);\n\t\t\tconst rightHand = hand.clone();\n\t\t\tleft.add(rightHand);\n\t\t\thands.push(rightHand);\n\t\t});\n\t\treturn hands;\n\t}\n\n\taddDragListener() {\n\t\tlet longitude, latitude;\n\t\tconst dragListener = new DragListener(this.container, (event) => {\n\t\t\tlongitude = this.longitude;\n\t\t\tlatitude = this.latitude;\n\t\t}, (event) => {\n\t\t\tthis.longitude = -event.distance.x * 0.1 + longitude;\n\t\t\tthis.latitude = event.distance.y * 0.1 + latitude;\n\t\t\tthis.direction = event.distance.x ? (event.distance.x / Math.abs(event.distance.x) * -1) : 1;\n\t\t\t// console.log('longitude', this.longitude, 'latitude', this.latitude, 'direction', this.direction);\n\t\t}, (event) => {\n\t\t\tthis.speed = Math.abs(event.strength.x) * 100;\n\t\t\t// console.log('speed', this.speed);\n\t\t});\n\t\treturn dragListener;\n\t}\n\n\tremovePoints() {\n\t\t/*\n\t\tif (this.points) {\n\t\t\tthis.points.remove();\n\t\t\tdelete this.points;\n\t\t}\n\t\t*/\n\t}\n\n\taddPoints(parent) {\n\t\tconst loader = new THREE.TextureLoader();\n\t\tconst geometry = new THREE.BufferGeometry();\n\t\t// hack fix\n\t\tconst vertices = [];\n\t\tvertices.push(0, -10000, 0);\n\t\tvertices.push(0, 10000, 0);\n\t\tgeometry.addAttribute('position', new THREE.Float32BufferAttribute(vertices, 3));\n\t\t// hack fix\n\t\tconst colors = new Array(100 * 3).fill(0);\n\t\tconst colorsAttribute = new THREE.Float32BufferAttribute(colors, 3);\n\t\tconst sizes = new Array(100).fill(10);\n\t\tgeometry.addAttribute('color', colorsAttribute);\n\t\tgeometry.addAttribute('customColor', new THREE.Float32BufferAttribute(colors, 3));\n\t\tgeometry.addAttribute('size', new THREE.Float32BufferAttribute(sizes, 1));\n\t\t/*\n\t\tconst material = new THREE.PointsMaterial({\n\t\t\tsize: 15,\n\t\t\tmap: loader.load('img/pin.png'),\n\t\t\tvertexColors: THREE.VertexColors,\n\t\t\tblending: THREE.AdditiveBlending,\n\t\t\tdepthTest: true,\n\t\t\ttransparent: true\n\t\t});\n\t\t*/\n\t\t/*\n\t\tconst material = new THREE.ShaderMaterial({\n\t\t\tuniforms: {\n\t\t\t\tcolor: { value: new THREE.Color(0xffffff) },\n\t\t\t\ttexture: { value: loader.load('img/pin.png') }\n\t\t\t},\n\t\t\tvertexColors: THREE.VertexColors,\n\t\t\tblending: THREE.AdditiveBlending,\n\t\t\tdepthTest: true,\n\t\t\ttransparent: true,\n\t\t\tvertexShader: shaderPoint.vertexShader,\n\t\t\tfragmentShader: shaderPoint.fragmentShader,\n\t\t\talphaTest: 0.9\n\t\t});\n\t\t*/\n\t\tconst material = new THREE.ShaderMaterial({\n\t\t\tuniforms: {\n\t\t\t\tamplitude: { value: 1.0 },\n\t\t\t\tcolor: { value: new THREE.Color(0xffffff) },\n\t\t\t\ttexture: { value: loader.load('img/pin.png') }\n\t\t\t},\n\t\t\tvertexShader: shaderPoint.vertexShader,\n\t\t\tfragmentShader: shaderPoint.fragmentShader,\n\t\t\ttransparent: true\n\t\t});\n\t\t// materials[i].color.setHSL(1, 0, 0);\n\t\tconst points = new THREE.Points(geometry, material);\n\t\tpoints.vertices = vertices;\n\t\tpoints.colors = colors;\n\t\tpoints.colorsAttribute = colorsAttribute;\n\t\tpoints.scale.set(0.95, 0.95, 0.95);\n\t\tparent.add(points);\n\t\treturn points;\n\t}\n\n\taddPoint(position, i) {\n\t\tconst points = this.points;\n\t\tconst geometry = points.geometry;\n\t\tconst vertices = points.vertices;\n\t\tconst index = vertices.length / 3;\n\t\tvertices.push(position.x, position.y, position.z);\n\t\tgeometry.addAttribute('position', new THREE.Float32BufferAttribute(vertices, 3));\n\t\tconst colorsAttribute = points.colorsAttribute;\n\t\tcolorsAttribute.setXYZ(index, 0, 0, 0);\n\t\tpoints.material.needsUpdate = true;\n\t\t// console.log(index, 'start');\n\t\tconst from = { opacity: 0 };\n\t\tTweenMax.to(from, 0.5, {\n\t\t\topacity: 1,\n\t\t\tdelay: 0.1 * i,\n\t\t\tonUpdate: () => {\n\t\t\t\t// console.log(index, from.opacity);\n\t\t\t\tcolorsAttribute.setXYZ(index, from.opacity, from.opacity, from.opacity);\n\t\t\t\tcolorsAttribute.needsUpdate = true;\n\t\t\t\tpoints.material.needsUpdate = true;\n\t\t\t},\n\t\t\tonCompleted: () => {\n\t\t\t\t// console.log(index, 'completed');\n\t\t\t}\n\t\t});\n\t}\n\n\tremovePoint(i) {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tconst points = this.points;\n\t\t\tconst geometry = points.geometry;\n\t\t\tconst vertices = points.vertices;\n\t\t\tconst index = vertices.length / 3;\n\t\t\tconst colorsAttribute = points.colorsAttribute;\n\t\t\tcolorsAttribute.setXYZ(index, 1, 1, 1);\n\t\t\tpoints.material.needsUpdate = true;\n\t\t\t// console.log(index, 'start');\n\t\t\tconst from = { opacity: 1 };\n\t\t\tTweenMax.to(from, 0.5, {\n\t\t\t\topacity: 0,\n\t\t\t\tdelay: 0.0 * i,\n\t\t\t\tonUpdate: () => {\n\t\t\t\t\t// console.log(index, from.opacity);\n\t\t\t\t\tcolorsAttribute.setXYZ(index, from.opacity, from.opacity, from.opacity);\n\t\t\t\t\tcolorsAttribute.needsUpdate = true;\n\t\t\t\t\tpoints.material.needsUpdate = true;\n\t\t\t\t},\n\t\t\t\tonCompleted: () => {\n\t\t\t\t\t// console.log(index, 'completed');\n\t\t\t\t\tvertices.splice(vertices.length - 3, 3);\n\t\t\t\t\tgeometry.addAttribute('position', new THREE.Float32BufferAttribute(vertices, 3));\n\t\t\t\t\tresolve();\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n\n\tcreatePoint(intersection) {\n\t\t// console.log(intersection);\n\t\tconst position = intersection.point.clone();\n\t\tthis.addPoint(position, 0);\n\t\tthis.view.points.push({\n\t\t\tid: 2,\n\t\t\tposition: position.toArray(),\n\t\t\ttype: 1,\n\t\t\tname: 'Point 2',\n\t\t\tkey: 'POINT2',\n\t\t});\n\t\t// p.multiplyScalar(1);\n\t\t/*\n\t\tconst positions = new Float32Array([...geometry.attributes.position.array, p.x, p.y, p.z]);\n\t\tconst attribute = new THREE.BufferAttribute(positions, 3);\n\t\tattribute.dynamic = true;\n\t\tgeometry.addAttribute('position', attribute);\n\t\tpositions.needsUpdate = true;\n\t\tgeometry.setDrawRange(0, positions.length);\n\t\tgeometry.verticesNeedUpdate = true;\n\t\tgeometry.elementsNeedUpdate = true;\n\t\t// geometry.computeVertexNormals();\n\t\tconsole.log(geometry);\n\t\t*/\n\t\t/*\n\t\tgeometry.vertices.push(p);\n\t\t// geometry.colors.push(new THREE.Color(Math.random(), Math.random(), Math.random()));\n\t\tgeometry.verticesNeedUpdate = true;\n\t\tgeometry.elementsNeedUpdate = true;\n\t\tgeometry.computeVertexNormals();\n\t\t*/\n\t\t// console.log(p);\n\t}\n\n\tonInitView(previous, current) {\n\t\treturn;\n\t\tconsole.log(previous, current);\n\t\tthis.onExitPoints(previous).then(() => {\n\t\t\tconsole.log(this.points.vertices);\n\t\t\tthis.onExitView(previous).then(() => {\n\t\t\t\t// if (!previous) {\n\t\t\t\tthis.onEnterView(current).then(() => {\n\t\t\t\t\tthis.onEnterPoints(current);\n\t\t\t\t\tconsole.log(this.points.vertices);\n\t\t\t\t});\n\t\t\t\t// }\n\t\t\t});\n\t\t});\n\t}\n\n\tonExitView(view) {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tif (view) {\n\t\t\t\tTweenMax.to(this.environment.sphere.material, 0.4, {\n\t\t\t\t\topacity: 0,\n\t\t\t\t\tdelay: 0.0,\n\t\t\t\t\tonCompleted: () => {\n\t\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\t\tresolve(view);\n\t\t\t\t\t\t}, 250);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tresolve(view);\n\t\t\t}\n\t\t});\n\t}\n\n\tonEnterView(view) {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tif (view) {\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t// const tourTextureSrc = container.getAttribute('texture');\n\t\t\t\t\tconst loader = new THREE.TextureLoader();\n\t\t\t\t\tloader.crossOrigin = '';\n\t\t\t\t\tloader.load(view.image, (texture) => {\n\t\t\t\t\t\t/*\n\t\t\t\t\t\t// texture.wrapS = texture.wrapT = THREE.RepeatWrapping;\n\t\t\t\t\t\t// texture.repeat.set(2, 2);\n\t\t\t\t\t\tthis.tourTexture = texture;\n\t\t\t\t\t\tthis.createScene();\n\t\t\t\t\t\t*/\n\t\t\t\t\t\t/*\n\t\t\t\t\t\tif (this.environment.sphere.material.map) {\n\t\t\t\t\t\t\tthis.environment.sphere.material.map.dispose();\n\t\t\t\t\t\t}\n\t\t\t\t\t\t*/\n\t\t\t\t\t\tif (view.camera) {\n\t\t\t\t\t\t\tthis.latitude = view.camera.latitude;\n\t\t\t\t\t\t\tthis.longitude = view.camera.longitude;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tconst material = this.environment.sphere.material;\n\t\t\t\t\t\tmaterial.opacity = 0;\n\t\t\t\t\t\tmaterial.color.setHex(0xffffff);\n\t\t\t\t\t\tmaterial.map = texture;\n\t\t\t\t\t\tmaterial.map.needsUpdate = true;\n\t\t\t\t\t\tmaterial.needsUpdate = true;\n\t\t\t\t\t\tTweenMax.to(material, 0.6, {\n\t\t\t\t\t\t\topacity: 1,\n\t\t\t\t\t\t\tdelay: 0.1,\n\t\t\t\t\t\t\tonCompleted: () => {\n\t\t\t\t\t\t\t\tresolve(view);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t\t}, 100);\n\t\t\t} else {\n\t\t\t\treject(view);\n\t\t\t}\n\t\t});\n\t}\n\n\tonEnterPoints(view) {\n\t\tif (!this.points) {\n\t\t\tconst points = this.points = this.addPoints(scene);\n\t\t}\n\t\tview.points.forEach((point, i) => this.addPoint(new THREE.Vector3(...point.position), i));\n\t}\n\n\tonExitPoints(view) {\n\t\tif (view) {\n\t\t\treturn Promise.all(view.points.map((point, i) => this.removePoint(i)));\n\t\t} else {\n\t\t\treturn Promise.resolve();\n\t\t}\n\t}\n\n\t// events\n\n\tonWindowResize() {\n\t\tconst container = this.container,\n\t\t\trenderer = this.renderer,\n\t\t\tcamera = this.camera;\n\t\tconst size = this.size;\n\t\tsize.width = container.offsetWidth;\n\t\tsize.height = container.offsetHeight;\n\t\tsize.aspect = size.width / size.height;\n\t\tif (renderer) {\n\t\t\trenderer.setSize(size.width, size.height);\n\t\t}\n\t\tif (camera) {\n\t\t\tcamera.aspect = size.width / size.height;\n\t\t\tcamera.updateProjectionMatrix();\n\t\t}\n\t}\n\n\tonMouseMove(event) {\n\t\tconst w2 = this.container.offsetWidth / 2;\n\t\tconst h2 = this.container.offsetHeight / 2;\n\t\tthis.mouse = {\n\t\t\tx: (event.clientX - w2) / w2,\n\t\t\ty: -(event.clientY - h2) / h2,\n\t\t};\n\t\t// console.log('onMouseMove', this.mouse);\n\t\t/*\n\t\tvar attributes = geometry.attributes;\n\t\traycaster.setFromCamera( mouse, camera );\n\t\tintersects = raycaster.intersectObject( points );\n\t\tif ( intersects.length > 0 ) {\n\t\t\tif ( INTERSECTED != intersects[ 0 ].index ) {\n\t\t\t\tattributes.size.array[ INTERSECTED ] = PARTICLE_SIZE;\n\t\t\t\tINTERSECTED = intersects[ 0 ].index;\n\t\t\t\tattributes.size.array[ INTERSECTED ] = PARTICLE_SIZE * 1.25;\n\t\t\t\tattributes.size.needsUpdate = true;\n\t\t\t}\n\t\t} else if ( INTERSECTED !== null ) {\n\t\t\tattributes.size.array[ INTERSECTED ] = PARTICLE_SIZE;\n\t\t\tattributes.size.needsUpdate = true;\n\t\t\tINTERSECTED = null;\n\t\t}\n\t\t*/\n\t}\n\n\tonMouseWheel(event) {\n\t\tconst camera = this.camera;\n\t\tconst fov = camera.fov + event.deltaY * 0.01;\n\t\tcamera.fov = THREE.Math.clamp(fov, 30, 75);\n\t\tcamera.updateProjectionMatrix();\n\t}\n\n\tonClick(event) {\n\t\t// this.tourCubesWaveAnimation(this.tour.cubes);\n\t\tconst raycaster = this.raycaster;\n\t\t// update the picking ray with the camera and mouse position\n\t\traycaster.setFromCamera(this.mouse, this.camera);\n\t\t// calculate objects intersecting the picking ray\n\t\tif (event.shiftKey) {\n\t\t\tconst intersections = raycaster.intersectObjects(this.environment.children);\n\t\t\tif (intersections) {\n\t\t\t\tconst intersection = intersections.find(x => x !== undefined);\n\t\t\t\tthis.createPoint(intersection);\n\t\t\t}\n\t\t\t// console.log(intersections);\n\t\t\t/*\n\t\t\tfor (var i = 0; i < intersects.length; i++ ) {\n\t\t\t\tconsole.log(intersections[i])\n\t\t\t\tintersects[i].object.material.color.set( 0xff0000 );\n\t\t\t}\n\t\t\t*/\n\t\t} else if (this.points) {\n\t\t\traycaster.params.Points.threshold = 10.0;\n\t\t\tconst intersections = raycaster.intersectObjects([this.points]);\n\t\t\tif (intersections) {\n\t\t\t\tconst intersection = intersections.find(x => x !== undefined);\n\t\t\t\tif (intersection) {\n\t\t\t\t\tconst index = intersection.index;\n\t\t\t\t\tconst point = intersection.point;\n\t\t\t\t\tconst debugInfo = `${index} => {${point.x}, ${point.y}, ${point.z}}`;\n\t\t\t\t\tconsole.log(index, point, debugInfo);\n\t\t\t\t\tthis.debugInfo.innerHTML = debugInfo;\n\t\t\t\t\tthis.index = (this.index + 1) % this.views.length;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tonSave(event) {\n\t\tthis.view.camera = {\n\t\t\tlatitude: this.latitude,\n\t\t\tlongitude: this.longitude,\n\t\t};\n\t\tthis.saveData({ views: this.views }, 'vr.json');\n\t}\n\n\t// animation\n\n\tdoParallax() {\n\t\t// parallax\n\t\tconst parallax = this.parallax;\n\t\tparallax.x += (this.mouse.x - parallax.x) / 8;\n\t\tparallax.y += (this.mouse.y - parallax.y) / 8;\n\t\t// this.light1.position.set(parallax.x * 5.0, 6.0 + parallax.y * 2.0, 4.0);\n\t\t// this.light2.position.set(parallax.x * -5.0, -6.0 - parallax.y * 2.0, 4.0);\n\t\t/*\n\t\tconst size = this.size;\n\t\tconst sx = size.width < 1024 ? 0 : -3;\n\t\tconst sy = size.width < 1024 ? -2 : 0;\n\t\tthis.tour.position.x = sx + parallax.x * 0.2;\n\t\tthis.tour.position.y = sy + parallax.y * 0.2;\n\t\t*/\n\t\t//\n\t\t/*\n\t\tconst titleXy = {\n\t\t\tx: -50 + 0.5 * -parallax.x,\n\t\t\ty: -50 + 0.5 * -parallax.y,\n\t\t};\n\t\tTweenMax.set(this.title, {\n\t\t\ttransform: 'translateX(' + titleXy.x + '%) translateY(' + titleXy.y + '%)'\n\t\t});\n\t\t*/\n\t\t/*\n\t\tconst shadowXy = {\n\t\t\tx: -50 + 3 * -parallax.x,\n\t\t\ty: -50 + 3 * -parallax.y,\n\t\t};\n\t\tTweenMax.set(this.shadow, {\n\t\t\ttransform: 'translateX(' + shadowXy.x + '%) translateY(' + shadowXy.y + '%)'\n\t\t});\n\t\t*/\n\t}\n\n\trender(delta) {\n\t\t/*\n\t\tif (!this.dragListener.dragging) {\n\t\t\tthis.tourRotation.y += this.tourSpeedRotation.y;\n\t\t\tthis.tourSpeedRotation.y += (0.002 - this.tourSpeedRotation.y) / 50;\n\t\t}\n\t\tthis.tour.rotation.copy(this.tourRotation).add(this.tourDragRotation);\n\t\t*/\n\t\t/*\n\t\tthis.points.geometry.vertices.forEach((vertex, i) => {\n\t\t\tconst local = this.tour.localToWorld(vertex.clone());\n\t\t\tconst distance = local.distanceTo(this.pointRef);\n\t\t\tconst s = Math.max(0, Math.min(1, (1 - distance))) * 5;\n\t\t\tthis.points.geometry.colors[i] = new THREE.Color(s, s, s);\n\t\t\tthis.points.geometry.colorsNeedUpdate = true;\n\t\t});\n\t\t*/\n\t\tthis.updateCamera();\n\t\tthis.renderer.render(this.scene, this.camera);\n\t\t// this.doParallax();\n\t}\n\n\tupdateCamera() {\n\t\tconst camera = this.camera;\n\t\tconst direction = this.direction;\n\t\tconst inertia = this.inertia;\n\t\tlet speed = this.speed;\n\t\tlet latitude = this.latitude;\n\t\tlet longitude = this.longitude;\n\t\tif (this.dragListener.dragging === false) {\n\t\t\t// longitude += 0.01 * direction * speed;\n\t\t\tspeed = Math.max(1, speed * 0.98);\n\t\t\tinertia.multiplyScalar(0.98);\n\t\t}\n\t\tlatitude = Math.max(-85, Math.min(85, latitude));\n\t\tconst phi = THREE.Math.degToRad(90 - latitude);\n\t\tconst theta = THREE.Math.degToRad(longitude);\n\t\tcamera.target.x = 500 * Math.sin(phi) * Math.cos(theta);\n\t\tcamera.target.y = 500 * Math.cos(phi);\n\t\tcamera.target.z = 500 * Math.sin(phi) * Math.sin(theta);\n\t\tcamera.lookAt(camera.target);\n\t\tthis.latitude = latitude;\n\t\tthis.longitude = longitude;\n\t\tthis.speed = speed;\n\t\tthis.inertia = inertia;\n\t\t/*\n\t\t// distortion\n\t\tcamera.position.copy( camera.target ).negate();\n\t\t*/\n\t}\n\n\t/*\n\tplay() {\n\t\tconst clock = new THREE.Clock();\n\t\tconst loop = (time) => {\n\t\t\tconst delta = clock.getDelta();\n\t\t\tthis.render(delta);\n\t\t\twindow.requestAnimationFrame(loop);\n\t\t};\n\t\tloop();\n\t}\n\t*/\n\n\tanimate() {\n\t\tthis.renderer.setAnimationLoop(() => {\n\t\t\tthis.render();\n\t\t});\n\t}\n\n\t// utils\n\n\tsaveData(data, filename = 'console.json') {\n\t\tif (!data) {\n\t\t\tconsole.error('Console.save: No data');\n\t\t\treturn;\n\t\t}\n\t\tif (typeof data === 'object') {\n\t\t\tdata = JSON.stringify(data, undefined, 4);\n\t\t}\n\t\tconst blob = new Blob([data], { type: 'text/json' });\n\t\tconst event = document.createEvent('MouseEvents');\n\t\tconst anchor = document.createElement('a');\n\t\tanchor.download = filename;\n\t\tanchor.href = window.URL.createObjectURL(blob);\n\t\tanchor.dataset.downloadurl = ['text/json', anchor.download, anchor.href].join(':');\n\t\tevent.initMouseEvent('click', true, false, window, 0, 0, 0, 0, 0, false, false, false, false, 0, null);\n\t\tanchor.dispatchEvent(event);\n\t\t// this.getSnapshot();\n\t}\n\n\tgetSnapshot() {\n\t\thtml2canvas(document.querySelector('.page')).then(canvas => {\n\t\t\tdocument.body.appendChild(canvas);\n\t\t});\n\t}\n\n}\n\nconst tour = new VRTour();\n\nwindow.onload = () => {\n\ttour.load('data/vr.json');\n};\n\n/*\nlet camera;\nif (USE_ORTHO) {\n\tconst width = 10;\n\tconst height = width / this.container.offsetWidth * this.container.offsetHeight;\n\tcamera = new THREE.OrthographicCamera(-width, width, height, -height, 0.01, 1000);\n} else {\n\tcamera = new THREE.PerspectiveCamera(50, window.innerWidth / window.innerHeight, 0.01, 1000);\n}\n// const camera = new THREE.OrthographicCamera(window.innerWidth / -2, window.innerWidth / 2, window.innerHeight / 2, window.innerHeight / -2, 0.01, 1000);\ncamera.position.set(0, 5.0, 12.0);\ncamera.up = new THREE.Vector3(0, 0, -1);\ncamera.lookAt(new THREE.Vector3(0, 0, 0));\nthis.camera = camera;\n*/\n\n/*\nconst ambient = new THREE.AmbientLight(0x222222);\nscene.add(ambient);\nthis.ambient = ambient;\n*/\n\n/*\n// color : Integer, intensity : Float, distance : Number, decay : Float\nconst light = new THREE.PointLight(0xffffff, 1000, 1000, 1);\nlight.position.set(0, 0, 0);\nscene.add(light);\nthis.light = light;\n*/\n\n/*\nlet light1;\nlight1 = new THREE.DirectionalLight(0xffffff, 4.0);\n// light1.castShadow = true;\n// light1.shadowCameraVisible = true;\n// light1.mapSize.width = 2048;\n// light1.mapSize.height = 2048;\nscene.add(light1);\nthis.light1 = light1;\nif (SHOW_HELPERS) {\n\tconst light1Helper = new THREE.DirectionalLightHelper(light1, 1);\n\tscene.add(light1Helper);\n}\nconst light2 = new THREE.DirectionalLight(0xffffff, 4.0);\nscene.add(light2);\nthis.light2 = light2;\nif (SHOW_HELPERS) {\n\tconst light2Helper = new THREE.DirectionalLightHelper(light2, 1);\n\tscene.add(light2Helper);\n}\n*/\n"],"file":"docs/js/vrtour.js"}